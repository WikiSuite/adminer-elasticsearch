--- adminer-4.3.1/adminer/drivers/elastic.inc.php	2017-11-13 10:00:30.380883318 -0200
+++ adminer-4.3.1-elasticsearch54/adminer/drivers/elastic.inc.php	2017-11-20 16:23:29.608073549 -0200
@@ -19,7 +19,8 @@ if (isset($_GET["elastic"])) {
 				@ini_set('track_errors', 1); // @ - may be disabled
 				$file = @file_get_contents($this->_url  . '/' . ltrim($path, '/'), false, stream_context_create(array('http' => array(
 					'method' => $method,
-					'content' => json_encode($content),
+					'content' => $content === null ? $content : json_encode($content),
+					'header' => 'Content-type:application/json',
 					'ignore_errors' => 1, // available since PHP 5.2.10
 				))));
 				if (!$file) {
@@ -60,7 +61,7 @@ if (isset($_GET["elastic"])) {
 
 			function connect($server, $username, $password) {
 				preg_match('~^(https?://)?(.*)~', $server, $match);
-				$this->_url = ($match[1] ? $match[1] : "http://") . "$username:$password@$match[2]/";
+				$this->_url = ($match[1] ? $match[1] : "http://") . "$username:$password@$match[2]";
 				$return = $this->query('');
 				if ($return) {
 					$this->server_info = $return['version']['number'];
@@ -108,6 +109,7 @@ if (isset($_GET["elastic"])) {
 
 		function select($table, $select, $where, $group, $order = array(), $limit = 1, $page = 0, $print = false) {
 			global $adminer;
+
 			$data = array();
 			$query = "$table/_search";
 			if ($select != array("*")) {
@@ -176,6 +178,55 @@ if (isset($_GET["elastic"])) {
 			return new Min_Result($return);
 		}
 
+		function update($type, $record, $queryWhere) {
+			$parts = preg_split('/ *= */', $queryWhere);
+
+			if (count($parts) === 2) {
+				$id = trim($parts[1]);
+				$query = "{$type}/{$id}";
+				return $this->_conn->query($query, $record, 'POST');
+			}
+
+			return false;
+		}
+
+		function insert($type, $record) {
+			$id = ""; // TODO: User should be able to inform _id
+
+			$query = "{$type}/{$id}";
+			$response = $this->_conn->query($query, $record, 'POST');
+			$this->_conn->last_id = $response['_id'];
+			return $response['created'];
+		}
+
+		function delete($type, $queryWhere) {
+			$ids = array();
+
+			if (is_array($_GET["where"]) && !empty($_GET["where"]["_id"])) {
+				$ids[] = $_GET["where"]["_id"];
+			}
+
+			if (is_array($_POST['check'])) {
+				foreach ($_POST['check'] as $check) {
+					$parts = preg_split('/ *= */', $check);
+					if (count($parts) === 2) {
+						$ids[] = trim($parts[1]);
+					}
+				}
+			}
+
+			$this->_conn->affected_rows = 0;
+			foreach ($ids as $id) {
+				$query = "{$type}/{$id}";
+				$response = $this->_conn->query($query, '{}', 'DELETE');
+
+				if (is_array($response) && $response['found'] == true) {
+					$this->_conn->affected_rows++;
+				}
+			}
+
+			return $this->_conn->affected_rows;
+		}
 	}
 
 
@@ -242,7 +293,7 @@ if (isset($_GET["elastic"])) {
 	function table_status($name = "", $fast = false) {
 		global $connection;
 		$search = $connection->query("_search?search_type=count", array(
-			"facets" => array(
+			"aggregations" => array(
 				"count_by_type" => array(
 					"terms" => array(
 						"field" => "_type",
@@ -252,13 +303,14 @@ if (isset($_GET["elastic"])) {
 		), "POST");
 		$return = array();
 		if ($search) {
-			foreach ($search["facets"]["count_by_type"]["terms"] as $table) {
-				$return[$table["term"]] = array(
-					"Name" => $table["term"],
+			$tables = $search["aggregations"]["count_by_type"]["buckets"];
+			foreach ( $tables as $table) {
+				$return[$table["key"]] = array(
+					"Name" => $table["key"],
 					"Engine" => "table",
-					"Rows" => $table["count"],
+					"Rows" => $table["doc_count"],
 				);
-				if ($name != "" && $name == $table["term"]) {
+				if ($name != "" && $name == $table["key"]) {
 					return $return[$name];
 				}
 			}
@@ -336,16 +388,16 @@ if (isset($_GET["elastic"])) {
 		return null;
 	}
 
-	/** Create database
+	/** Create index
 	* @param string
 	* @return mixed
 	*/
 	function create_database($db) {
 		global $connection;
-		return $connection->rootQuery(urlencode($db), array(), 'PUT');
+		return $connection->rootQuery(urlencode($db), null, 'PUT');
 	}
 
-	/** Drop databases
+	/** Remove index
 	* @param array
 	* @return mixed
 	*/
@@ -354,7 +406,31 @@ if (isset($_GET["elastic"])) {
 		return $connection->rootQuery(urlencode(implode(',', $databases)), array(), 'DELETE');
 	}
 
-	/** Drop tables
+	/** Alter type
+	* @param array
+	* @return mixed
+	*/
+	function alter_table($table, $name, $fields, $foreign, $comment, $engine, $collation, $auto_increment, $partitioning) {
+		global $connection;
+
+		$properties = array();
+		foreach($fields as $f) {
+			$field_name = trim($f[1][0]);
+			$field_type = trim($f[1][1] ?: "text");
+
+			$properties[$field_name] = array(
+				'type' => $field_type
+			);
+		}
+
+		if(!empty($properties)) {
+			$properties = array('properties' => $properties);
+		}
+
+		return $connection->query("_mapping/{$name}", $properties, 'PUT');
+	}
+
+	/** Drop types
 	* @param array
 	* @return bool
 	*/
@@ -367,9 +443,26 @@ if (isset($_GET["elastic"])) {
 		return $return;
 	}
 
+	function last_id() {
+		global $connection;
+		return $connection->last_id;
+	}
+
 	$jush = "elastic";
 	$operators = array("=", "query");
 	$functions = array();
 	$grouping = array();
 	$edit_functions = array(array("json"));
+
+	$types = array(); ///< @var array ($type => $maximum_unsigned_length, ...)
+	$structured_types = array(); ///< @var array ($description => array($type, ...), ...)
+	foreach (array(
+		lang('Numbers') => array("long" => 3, "integer" => 5, "short" => 8, "byte" => 10, "double" => 20, "float" => 66, "half_float" => 12, "scaled_float" => 21),
+		lang('Date and time') => array("date" => 10),
+		lang('Strings') => array("string" => 65535, "text" => 65535),
+		lang('Binary') => array( "binary" => 255),
+	) as $key => $val) {
+		$types += $val;
+		$structured_types[$key] = array_keys($val);
+	}
 }
